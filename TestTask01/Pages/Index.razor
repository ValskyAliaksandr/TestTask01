@page "/"
@inject IControgentServises controgentServises
@inject IPolzovatelServises polzovatelServises
<div class="row">
<div style="display:block;">
    <div class="mb-3">
        <label for="Input1" class="form-label">Имя:</label>
        <input type="text" @bind="@polzovatel.Name" id="Input1" placeholder="Иванов">
    </div>
    <div class="mb-3">
        <label for="Input2" class="form-label">Электронная почта:</label>
            <input type="email" @bind="@polzovatel.Email" @onfocusout="isUserInBase" id="Input2" placeholder="name@example.com">
            @if (isEmailEmpty)
            {
                <b>заполните адрес электронной почты</b>
            }
        </div>
</div>
</div>
<div style="display:block;">
    <label for="Input3" class="form-label">УНП:</label>
    <input type="text" size="9" @bind="UNP"  id="Input3" placeholder="123456789">
    <div class="btn btn-group">
        <button @onclick="Verify" class="btn btn-outline-success">Проверить</button>    
    </div>
</div>
@if (polzovatel != null && polzovatel.OrderControgents != null)
{
    <table class="table table-hover">
        <thead class="table-secondary">
            <tr>
                <td>#</td>
                <td>УНП</td>
                <td>Наименование</td>
                <td>Наличие в локальной БД</td>
                <td>Статус на портале</td>
            </tr>
        </thead>
        <tbody>
            @{
                int npp = 0;
                foreach (var i in polzovatel.OrderControgents)
                {
                    npp++;
                    <tr>
                        <td>@npp</td>
                        <td>@i.Controgent?.UNP</td>
                        <td>@i.Controgent?.Name</td>
                        <td>@if (i.Controgent.isBase) { <span>ДА</span>}else{<span>НЕТ</span>}</td>
                        <td>@i.Controgent?.Status</td>
                        @if (i.Controgent != null && !i.Controgent.isBase)
                        {
                            <button @onclick="(()=>ContragentAdd(i))" class="btn btn-outline-success">Добавить УНП в базу</button>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code{
    Polzovatel polzovatel { get; set; } = new();
    bool isEmailEmpty;
    Controgent? controgent { get; set; } = new();
    string UNP = string.Empty;
    
    async Task Verify()
    {
        if (string.IsNullOrEmpty(polzovatel.Email))
        {
            isEmailEmpty = true;
            return;
        }
        else isEmailEmpty = false;

        await ControgentVerify();
        if (polzovatel.OrderControgents!=null && controgent!=null)
            polzovatel.OrderControgents.Add(new OrderControgent { Controgent = new Controgent() 
                {Name=controgent.Name, UNP=controgent.UNP, isBase= controgent.isBase, Id=controgent.Id, Status = controgent.Status } });
    }

    void ContragentAdd(OrderControgent ordercontrogent)
    {        
        ordercontrogent.Controgent.isBase = true;
    }

    async Task ControgentVerify()
    {
        await controgentServises.ControgentIsBaseByUNP(UNP);
        var controgentdb = controgentServises.Controgent;
        if (controgentdb != null)
        {
            controgent = controgentdb;
            controgent.isBase = true;
        }
        else
        {
            controgent = new Controgent() { UNP = UNP}; 
        }
        await controgentServises.GetStatusPortalByUNP(UNP);
        if (controgentServises.Controgent != null)
        {            
            controgent.Status = controgentServises.Controgent.Status;
        }
        else
        {
            controgent.Status = "нет на портале";
        }
    }

    async Task isUserInBase()
    {
        if (string.IsNullOrEmpty(polzovatel.Email)) return;
        await polzovatelServises.GetPolzovatelByEmail(polzovatel.Email);
        var polzovateldb = polzovatelServises.Polzovatel;
        if (polzovateldb != null)
        {
            polzovatel = polzovateldb;
            await polzovatelServises.GetControgentList(polzovatel);
            polzovatel.OrderControgents = polzovatelServises.OrderControgents;
        }
        else
        {
            await polzovatelServises.PolzovatelEdit(polzovatel);
            polzovatel.OrderControgents = new List<OrderControgent>();
        }
    }
}